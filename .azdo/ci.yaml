resources:
  containers:
    - container: mlops
      image: mcr.microsoft.com/mlops/python:latest

pr: none
trigger:
  branches:
    include:
      - master
  paths:
    include:
      - code/

variables:
  - group: kubefow-azdo-sample

pool:
  vmImage: ubuntu-latest

stages:
  - stage: "Code_Quality_Check"
    displayName: "Code Quality Check"
    jobs:
      - job: "Code_Quality_Check"
        displayName: "Code Quality Check"
        container: mlops
        timeoutInMinutes: 0
        steps:
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: 'echo ''Hello world'''
          # - template: code-quality-template.yml

  - stage: "Build_and_Push_KF_Component_Images"
    displayName: "Build and Push KF Component Images"
    jobs:
      - job:
        steps:
        - task: Docker@2
          displayName: Build and Push Preprocess
          inputs:
            containerRegistry: 'kubeflow-azdo-sample-acr-sc'
            repository: 'mexicanfood/preprocess'
            command: 'buildAndPush'
            Dockerfile: 'code/preprocess/Dockerfile'
            buildContext: 'code/preprocess/'
            tags: 'latest'
        - task: Docker@2
          displayName: Build and Push Register Artifacts
          inputs:
            containerRegistry: 'kubeflow-azdo-sample-acr-sc'
            repository: 'mexicanfood/registerartifacts'
            command: 'buildAndPush'
            Dockerfile: 'code/register-artifacts/Dockerfile'
            buildContext: 'code/register-artifacts/'
            tags: 'latest'
        - task: Docker@2
          displayName: Build and Push Register MLFlow
          inputs:
            containerRegistry: 'kubeflow-azdo-sample-acr-sc'
            repository: 'mexicanfood/register-mlflow'
            command: 'buildAndPush'
            Dockerfile: 'code/register-mlflow/Dockerfile'
            buildContext: 'code/register-mlflow/'
            tags: 'latest'
        - task: Docker@2
          displayName: Build and Push Register
          inputs:
            containerRegistry: 'kubeflow-azdo-sample-acr-sc'
            repository: 'mexicanfood/register'
            command: 'buildAndPush'
            Dockerfile: 'code/register/Dockerfile'
            buildContext: 'code/register/'
            tags: 'latest'
        - task: Docker@2
          displayName: Build and Push Training
          inputs:
            containerRegistry: 'kubeflow-azdo-sample-acr-sc'
            repository: 'mexicanfood/training'
            command: 'buildAndPush'
            Dockerfile: 'code/training/Dockerfile'
            buildContext: 'code/training/'
            tags: 'latest'
        # - task: Docker@2
        #   displayName: Build and Push Databricks
        #   inputs:
        #     containerRegistry: 'kubeflow-azdo-sample-acr-sc'
        #     repository: 'mexicanfood/databricks-notebook'
        #     command: 'buildAndPush'
        #     Dockerfile: 'code/databricks/Dockerfile'
        #     buildContext: 'code/databricks/'
        #     tags: 'latest'

  - stage: "Build_Upload_Run_Kubeflow_Pipeline"
    displayName: 'Build, Upload, and Run Kubeflow Pipeline'
    variables:
    - group: kubeflow-task-variables
    # - name: 'API_TOKEN'
    #   value: ${KF_API_TOKEN}
    jobs:
      - job: 
        steps:
        - task: UsePythonVersion@0
          inputs:
            versionSpec: '3.7'
            addToPath: true
            architecture: 'x64'
        - task: CmdLine@2
          inputs:
            script: |
              pip install kfp --upgrade
              python code/pipeline.py
        - task: KubeflowUploadPipeline@0
          inputs:
            kubeflowEndpoint: '$(KF_ENDPOINT)'
            bearerToken: '$(KF_API_TOKEN)'
            kubeflowPipelineTask: '$(KF_UPLOAD_CHOICE)'
            pipelineFilePath: '$(KF_PIPELINE_FILE)'
            newPipelineName: '$(KF_NEW_PIPELINE_NAME)'
            existingPipelineName: '$(KF_EXISTING_PIPELINE_NAME)'
            versionName: '$(KF_NEW_VERSION_NAME)'
        - task: KubeflowExperimentRun@0
          inputs:
            kubeflowEndpoint: '$(KF_ENDPOINT)'
            bearerToken: '$(KF_API_TOKEN)'
            pipeline: '$(KF_NEW_PIPELINE_NAME)'
            useDefaultVersion: '$(KF_USE_DEFAULT_VERSION)'
            pipelineVersion: '$(KF_NEW_PIPELINE_NAME)'
            runName: '$(KF_RUN_NAME)'
            pipelineParams: '$(KF_PIPELINE_PARAMS)'
            runDescription: '$(KF_RUN_DESCRIPTION)'
            waitForRunToFinish: '$(KF_WAIT_TO_COMPLETE)'
            experiment: '$(KF_EXPERIMENT_CHOICE)'
            experimentName: '$(KF_EXPERIMENT_NAME)'
          condition: 
            and(succeeded(), eq(variables['kf_upload_choice'], 'uploadNew'))

        - task: KubeflowExperimentRun@0
          inputs:
            kubeflowEndpoint: '$(KF_ENDPOINT)'
            bearerToken: '$(KF_API_TOKEN)'
            pipeline: '$(KF_EXISTING_PIPELINE_NAME)'
            useDefaultVersion: $(KF_USE_DEFAULT_VERSION)
            pipelineVersion: '$(KF_NEW_VERSION_NAME)'
            runName: '$(KF_RUN_NAME)'
            pipelineParams: '$(KF_PIPELINE_PARAMS)'
            runDescription: '$(KF_RUN_DESCRIPTION)'
            waitForRunToFinish: '$(KF_WAIT_TO_COMPLETE)'
            experiment: '$(KF_EXPERIMENT_CHOICE)'
            experimentName: '$(KF_EXPERIMENT_NAME)'
          condition: 
            and(succeeded(), eq(variables['kf_upload_choice'], 'uploadNewVersion'))